var requirejs, require, define;
(function (global, setTimeout) {
    var req, s, head, baseElement, dataMain, src,
        interactiveScript, currentlyAddingScript, mainScript, subPath,
        version = '2.3.6',
        commentRegExp = /\/\*[\s\S]*?\*\/|([^:"'=]|^)\/\/.*$/mg,
        cjsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,
        jsSuffixRegExp = /\.js$/,
        currDirRegExp = /^\.\//,
        op = Object.prototype,
        ostring = op.toString,
        hasOwn = op.hasOwnProperty,
        isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document),
        isWebWorker = !isBrowser && typeof importScripts !== 'undefined'`,
  a:'nnn',
  length:''
}
},
mounted (){
this.filerender();
},
methods:{
  typecheck(name){
//temporary type check
      if(name){
        //console.log('typecheck:',name,name.indexOf("."),typeof(name))
        let r = name.indexOf(".");
        if(r===-1){
             return true;
                   }
        else return false;
                }
        },
        filerender(){
          let s = '/' + this.$route.params.path;
            axios.post('http://localhost:8000/api/list',{path:s}).then((res) => {
              console.log(res.data)
            this.datac = res.data.data;
            this.length = this.datac.length;
            this.length = this.length/6;
            this.length = Math.ceil(this.length)
          })
           .catch(err =>{
      
             this.$store.dispatch('logout');
             this.$router.push({ path: '/'})
             //this.logout();
             throw err
            })
        },
        async fileclicked(subpath){

          let promise = new Promise((resolve, reject) => {
            console.log('fileclicked',subpath)
        let sub = this.$route.params.path +subpath+'/'
                    console.log('fileclicked',sub)

       this.$router.push({ name: 'directory', params: { path: sub} })
          this.filerender();
          })
           
           await promise;

        }

    },
      watch: {
    '$route' (to, from) {
		this.filerender();
  }
  }

}
</script>
var requirejs, require, define;
(function (global, setTimeout) {
    mritunjay goutam
    var req, s, head, baseElement, dataMain, src,
        interactiveScript, currentlyAddingScript, mainScript, subPath,
        version = '2.3.6',
        commentRegExp = /\/\*[\s\S]*?\*\/|([^:"'=]|^)\/\/.*$/mg,
        cjsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,
        jsSuffixRegExp = /\.js$/,
        currDirRegExp = /^\.\//,
        op = Object.prototype,
        ostring = op.toString,
        hasOwn = op.hasOwnProperty,
        isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document),
        isWebWorker = !isBrowser && typeof importScripts !== 'undefined'`,
  a:'nnn',
  length:''
}
},
mounted (){
this.filerender();
},
methods:{
  typecheck(name){
//temporary type check
      if(name){
        //console.log('typecheck:',name,name.indexOf("."),typeof(name))
        let r = name.indexOf(".");
        if(r===-1){
             return true;
                   }
        else return false;
                }
        },
        filerender(){
          let s = '/' + this.$route.params.path;
            axios.post('http://localhost:8000/api/list',{path:s}).then((res) => {
              console.log(res.data)
            this.datac = res.data.data;
            this.length = this.datac.length;
            this.length = this.length/6;
            this.length = Math.ceil(this.length)
          })
           .catch(err =>{
      
             this.$store.dispatch('logout');
             this.$router.push({ path: '/'})
             //this.logout();
             throw err
            })
        },
        async fileclicked(subpath){

          let promise = new Promise((resolve, reject) => {
            console.log('fileclicked',subpath)
        let sub = this.$route.params.path +subpath+'/'
                    console.log('fileclicked',sub)

       this.$router.push({ name: 'directory', params: { path: sub} })
          this.filerender();
          })
           
           await promise;

        }

    },
      watch: {
    '$route' (to, from) {
		this.filerender();
  }
  }

}
</script>
